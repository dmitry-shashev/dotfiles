syntax enable


set backspace=indent,eol,start
set number
"relative numbers for rows
set nu rnu

set clipboard=unnamedplus   " using system clipboard
set noswapfile
set visualbell
set noerrorbells
set ignorecase              " case insensitive 
set smartcase


call plug#begin()
Plug 'preservim/nerdtree'
call plug#end()
"----------------------------------------------------------------
" see all commands
":actionlist
set splitright
" enable line numbers
" make sure relative line numbers are used
nnoremap <silent> ;n :<C-u>NERDTreeToggle<CR>
nnoremap <silent> ;t :<C-u>NERDTreeFocus<CR>
nnoremap <silent> 't :<C-u>NERDTreeFind<CR>
"----------------------------------------------------------------

" copy till the end of the line
nnoremap Y y$

" save
nnoremap <space><space> <Esc>:<C-u>w<CR>

nnoremap gh <C-W><C-H>
nnoremap gj <C-W><C-J>
nnoremap gk <C-W><C-K>
nnoremap gl <C-W><C-L>

nnoremap gi <C-I>
nnoremap go <C-O>

nnoremap ;u <C-u>zz
nnoremap ;d <C-d>zz

nnoremap q :wq<cr>

inoremap <M-f> <ESC>
vnoremap <M-f> <ESC>

" remap fast bookmarks
noremap ma mA
noremap <space>a `A<CR>zz<CR>
noremap ms mS
noremap <space>s `S<CR>zz<CR>
noremap md mD
noremap <space>d `D<CR>zz<CR>
noremap mf :delmarks A<CR>:delmarks S<CR>:delmarks D<CR>

" fast react component search
noremap <space>y G0?}<CR>%<CR>:<C-u>?(<CR>0f(<CR>ztkj
noremap <space>u G0/export<CR>?)<CR>%0f(<CR>ztkj
noremap <space>i G0?\Cinterface<CR>j0wztkj

" comment the line
map ;c :<C-u>action CommentByLineComment<CR>

" tabs
nnoremap , :tabprevious<CR>
nnoremap . :tabnext<CR>
nnoremap <C-W>t :tabedit<CR>

" resize split
nnoremap _ :<C-u>resize +5<CR>
nnoremap + :<C-u>resize -5<CR>
nnoremap - :<C-u>vertical resize +5<CR>
nnoremap = :<C-u>vertical resize -5<CR>

" http://codecode.fun/blog/2020/01/05/idea-actions-list
" or in IDR :actionlist
" in order to run action type - :action MoveTabRight
nnoremap <silent> ;f :<C-u>action GotoFile<CR>
vnoremap <silent> ;f :<C-u>action GotoFile<CR>
nnoremap <silent> ;s :<C-u>action FindInPath<CR>
vnoremap <silent> ;s :<C-u>action FindInPath<CR>

" git
noremap <space>h :<C-u>action VcsShowNextChangeMarker<CR>
noremap <space>l :<C-u>action VcsShowPrevChangeMarker<CR>

nnoremap <silent> ;v :<C-u>action SplitVertically<CR>
nnoremap <silent> ;b :<C-u>action SplitHorizontally<CR>

nnoremap <silent> ;a :<C-u>action QuickImplementations<CR>

" copies filepath to clipboard by pressing y<template name="=" value=" === $END$" description="=" toReformat="false" toShortenFQNames="true">
  <context>
    <option name="JAVA_SCRIPT" value="true" />
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="a" value="Array&lt;$END$&gt;" description="Array" toReformat="false" toShortenFQNames="true">
  <context>
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="aa" value="&lt;a href=&quot;$END$&quot; rel=&quot;noopener noreferrer&quot;&gt;$START$&lt;/a&gt;&#10;" description="link" toReformat="false" toShortenFQNames="true">
  <variable name="START" expression="" defaultValue="" alwaysStopAt="true" />
  <context>
    <option name="JAVA_SCRIPT" value="true" />
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="b" value="boolean$END$" description="boolean" toReformat="false" toShortenFQNames="true">
  <context>
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="bb" value="&lt;button type=&quot;button&quot;&gt;$END$&lt;/button&gt;" description="button" toReformat="false" toShortenFQNames="true">
  <context>
    <option name="JAVA_SCRIPT" value="true" />
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="c" value="const $END$" description="const" toReformat="false" toShortenFQNames="true">
  <context>
    <option name="JAVA_SCRIPT" value="true" />
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="ca" value="($START$) =&gt; [&#10;&#9;$END$&#10;]" description="callback array" toReformat="false" toShortenFQNames="true">
  <variable name="START" expression="" defaultValue="" alwaysStopAt="true" />
  <context>
    <option name="JAVA_SCRIPT" value="true" />
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="cb" value="($START$) =&gt; {&#10;&#9;$END$&#10;}" description="callbach" toReformat="false" toShortenFQNames="true">
  <variable name="START" expression="" defaultValue="" alwaysStopAt="true" />
  <context>
    <option name="JAVA_SCRIPT" value="true" />
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="cc" value="// @#$&#10;// eslint-disable-next-line no-console&#10;console.log($END$)" description="console log" toReformat="false" toShortenFQNames="true">
  <context>
    <option name="JAVA_SCRIPT" value="true" />
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="cl" value="className={$END$}" description="react class" toReformat="false" toShortenFQNames="true">
  <context>
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="cn" value="($START$) =&gt; $END$" description="callback simple" toReformat="false" toShortenFQNames="true">
  <variable name="START" expression="" defaultValue="" alwaysStopAt="true" />
  <context>
    <option name="JAVA_SCRIPT" value="true" />
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="cv" value="($START$) =&gt; ({&#10;&#9;$END$&#10;})" description="callback value" toReformat="false" toShortenFQNames="true">
  <variable name="START" expression="" defaultValue="" alwaysStopAt="true" />
  <context>
    <option name="JAVA_SCRIPT" value="true" />
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="d" value="&lt;div&gt;$END$&lt;/div&gt;" description="div" toReformat="false" toShortenFQNames="true">
  <context>
    <option name="JAVA_SCRIPT" value="true" />
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="e" value="export $END$" description="export" toReformat="false" toShortenFQNames="true">
  <context>
    <option name="JAVA_SCRIPT" value="true" />
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="ed" value="export default $END$" description="export default" toReformat="false" toShortenFQNames="true">
  <context>
    <option name="JAVA_SCRIPT" value="true" />
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="f" value="function $START$($MIDDLE$): void {&#10;  $END$&#10;}" description="function" toReformat="false" toShortenFQNames="true">
  <variable name="START" expression="" defaultValue="" alwaysStopAt="true" />
  <variable name="MIDDLE" expression="" defaultValue="" alwaysStopAt="true" />
  <context>
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="i" value="interface $START$ {&#10;  $END$&#10;}" description="interface" toReformat="false" toShortenFQNames="true">
  <variable name="START" expression="" defaultValue="" alwaysStopAt="true" />
  <context>
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="if" value="if ($START$) {&#10;  $END$&#10;}" description="if" toReformat="false" toShortenFQNames="true">
  <variable name="START" expression="" defaultValue="" alwaysStopAt="true" />
  <context>
    <option name="JAVA_SCRIPT" value="true" />
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="ir" value="import React from 'react'" description="import react" toReformat="false" toShortenFQNames="true">
  <context>
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="n" value="number$END$" description="number" toReformat="false" toShortenFQNames="true">
  <context>
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="p" value="Promise&lt;$END$&gt;" description="promise" toReformat="false" toShortenFQNames="true">
  <context>
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="r" value="return $END$" description="return" toReformat="false" toShortenFQNames="true">
  <context>
    <option name="JAVA_SCRIPT" value="true" />
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="rc" value="import { FC } from 'react'&#10;&#10;export const $1$: FC = () =&gt; {&#10;  $END$&#10;}&#10;" description="react component" toReformat="false" toShortenFQNames="true">
  <variable name="1" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
  <context>
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="rci" value="import { FC } from 'react'&#10;&#10;interface Props {&#10;  data: string$END$&#10;}&#10;&#10;export const $1$: FC&lt;Props&gt; = ({ data }) =&gt; {&#10;}&#10;" description="reac component with props" toReformat="false" toShortenFQNames="true">
  <variable name="1" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
  <context>
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="re" value="readonly $END$" description="readonly" toReformat="false" toShortenFQNames="true">
  <context>
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="si" value="setInterval(() =&gt; {&#10;  $2$&#10;}, $1$)" description="set interval" toReformat="false" toShortenFQNames="true">
  <variable name="1" expression="" defaultValue="1000" alwaysStopAt="true" />
  <variable name="2" expression="" defaultValue="" alwaysStopAt="true" />
  <context>
    <option name="JAVA_SCRIPT" value="true" />
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="st" value="setTimeout(() =&gt; {&#10;  $2$&#10;}, $1$)" description="set timeout" toReformat="false" toShortenFQNames="true">
  <variable name="1" expression="" defaultValue="1000" alwaysStopAt="true" />
  <variable name="2" expression="" defaultValue="" alwaysStopAt="true" />
  <context>
    <option name="JAVA_SCRIPT" value="true" />
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="ti" value="// @ts-ignore" description="ts ignore" toReformat="false" toShortenFQNames="true">
  <context>
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="ue" value="useEffect(() =&gt; {&#10;  $END$&#10;}, [])" description="use effect" toReformat="false" toShortenFQNames="true">
  <context>
    <option name="TypeScript" value="true" />
  </context>
</template>
<template name="us" value="const [$CONSTANT$, set$CAPITALIZED_CONSTANT$] = useState($END$);" description="use state" toReformat="false" toShortenFQNames="true">
  <variable name="CONSTANT" expression="" defaultValue="" alwaysStopAt="true" />
  <variable name="CAPITALIZED_CONSTANT" expression="capitalize(CONSTANT)" defaultValue="" alwaysStopAt="false" />
  <context>
    <option name="TypeScript" value="true" />
  </context>
</template>f
nnoremap <silent> yf :<C-u>action CopyContentRootPath<CR>
" copies pwd to clipboard: command yd
" nnoremap <silent> yd :<C-u>action SplitHorizontally<CR>

"nnoremap gv gd gv gh q gl<CR>
noremap <silent> Q :<C-u>action CloseAllEditors<CR>
nnoremap gr :<C-u>action FindUsages<CR>
nnoremap gR :<C-u>action RenameElement<CR>
nnoremap <space>j :<C-u>action GotoNextError<CR>
nnoremap <space>k :<C-u>action GotoPreviousError<CR>

"----------------------------------------------------------------

nnoremap <space>L :<C-u>action Vcs.RollbackChangedLines<CR>
nnoremap ;G :<C-u>action GitToolBox.BlameDetails<CR>
nnoremap ;g :<C-u>action GitToolBox.ShowInlineBlame<CR>

